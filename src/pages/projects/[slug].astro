---
import { getCollection, getEntry } from "astro:content";
import Site from "../../layouts/Site.astro";
import NextProject from "../../components/NextProject.svelte";
import Footer from "../../components/Footer.astro";

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  const filteredProjects = projects.filter(
    (project) =>
      project?.data?.alt !== "Menace" && project?.data?.alt !== "Dr. Trust"
  );

  return projects.map((post) => ({ params: { slug: post.slug } }));
  return filteredProjects.map((post) => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;

// use date
const projects = (await getCollection("projects")).sort((a, b) =>
  a.data.date > b.data.date ? -1 : 1
);

// const filteredProjects = projects.filter(
//   (project) => project?.data?.alt !== "Menace"
// );

const idx = projects.findIndex((p) => p.slug === slug);
if (idx === -1) {
  throw new Error(`Project with slug '${slug}' not found`);
}

const { Content } = await projects[idx].render();

let nextProject;
for (let i = 1; i < projects.length; i++) {
  const nextIdx = (idx + i) % projects.length;
  if (
    projects[nextIdx].data.alt !== "Menace" &&
    projects[nextIdx].data.alt !== "Dr. Trust"
  ) {
    nextProject = projects[nextIdx];
    break;
  }
}

// const filteredProjects = projects.filter(
//   (project) => project?.data?.alt !== "Menace"
// );

// const idx = filteredProjects.findIndex((p) => p.slug === slug);
// if (idx === -1) {
//   throw new Error(`Project with slug '${slug}' not found`);
// }

// const { Content } = await filteredProjects[idx].render();

// const nextProject = filteredProjects[(idx + 1) % filteredProjects.length];
---

<Site>
  <div class="glass-bg">
    <Content />
    <NextProject
      project={{
        slug: nextProject?.slug,
        ...(nextProject?.data || {}),
      }}
    />
    <Footer />
  </div>
</Site>
